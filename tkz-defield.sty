\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{tkz-defield}[2021/03/22]
\RequirePackage{tkz-euclide}

\newcommand{\defield}{
\begingroup
% \begin{tikzpicture}
% [
% declare function={#1}
% ]
\def\plottitle{\( y'=(1-x)y-x^2\)}

\def\xknown{0}% initial condition
\def\yknown{1}

\def\xmax{3} \def\xmin{-3}% domain
\def\ymax{3} \def\ymin{-3}

\def\xresolution{0.01}% solution curve resolution
\def\xdivisions{18}% number of slope markers per row - 1
\def\ydivisions{18}% number of slope markers per column - 1

% not this next one is an actual length
\def\slopemarklength{3pt}% actually half the slope length
% TODO: calculate bleed and tick-size from slopemarklength
\def\xbleed{.2}% solution curve bleeds this much beyond min/max
\def\ybleed{.2}% solution curve bleeds this much beyond min/max
% \def\xticksize{(\xmax+\xmin)/10}% actually half the tick size
% \def\yticksize{(\ymax+\ymin)/10}% actually half the tick size
\def\xticksize{0.2}% tick protrudes this much each way
\def\yticksize{0.2}% tick protrudes this much each way


\tkzInit[ymax=\ymax, ymin=\ymin, xmax=\xmax, xmin=\xmin]

% some options could be enabled here, but hard to customize
% \tkzAxeXY
% \tkzGrid


% axes
\draw[->] (\xmin-.5,0) node[above left] {\phantom{$x$}}
      --  (\xmax+.5,0) node[below right] {$x$};
\draw[->] (0,\ymin-.5) node[below right] {\phantom{$y$}}
      --  (0,\ymax+.5) node[above left] {$y$};

% tickmarks
\draw (\xmin,\xticksize)--(\xmin,-\xticksize) node[below]{$\xmin$};
\draw (\xmax,\xticksize)--(\xmax,-\xticksize) node[below]{$\xmin$};
\draw (\ymin,\xticksize)--(\xmin,-\xticksize) node[below]{$\xmin$};
\draw (\yticksize,\ymin)--(-\yticksize,\ymin) node[left ]{$\ymin$};
\draw (\yticksize,\ymax)--(-\yticksize,\ymax) node[left ]{$\ymax$};

% slope lines
\pgfmathsetmacro{\xnext}{\xmin+(\xmax-\xmin)/\ydivisions}
\pgfmathsetmacro{\ynext}{\ymin+(\ymax-\ymin)/\ydivisions}
\foreach \x in {\xmin,\xnext,...,\xmax}
\foreach \y in {\ymin,\ynext,...,\ymax}
{
  \pgfmathsetmacro{\fprime}{f(\x,\y)}
  \draw[
      cyan,
      line width=0.5pt,
      shift={({\x},{\y})}
    ]
      ($(0,0)!-\slopemarklength!(1,1*\fprime)$)
    --($(0,0)! \slopemarklength!(1,1*\fprime)$);
}


% particular solution, marching forwards
\pgfmathsetmacro{\xnext}{\xknown+\xresolution}
\pgfmathsetmacro{\xnextnext}{\xnext+\xresolution}
\pgfmathsetmacro{\y}{\yknown}
\edef\pointlist{(\xknown,\y)}
\pgfmathparse{\xmax+\xbleed}
\foreach \x [remember=\y] in {\xnext,\xnextnext,...,\pgfmathresult}
{
\pgfmathparse{\y<(\ymin-\ybleed) || \y>(\ymax+\ybleed) ?int(1):int(0)}
\ifnum\pgfmathresult=0
\pgfmathsetmacro{\y}{\y+f(\x,\y)*\xresolution}
\xdef\pointlist{\pointlist (\x,\y)}% append to point list
\fi
}

% and backwards
\pgfmathsetmacro{\xnext}{\xknown-\xresolution}
\pgfmathsetmacro{\xnextnext}{\xnext-\xresolution}
\pgfmathsetmacro{\y}{\yknown}
\pgfmathparse{\xmin-\xbleed}
\foreach \x [remember=\y] in {\xnext,\xnextnext,...,\pgfmathresult}
{
\pgfmathparse{\y<(\ymin-\ybleed) || \y>(\ymax+\ybleed) ?int(1):int(0)}
\ifnum\pgfmathresult=0
\pgfmathsetmacro{\y}{\y-f(\x,\y)*\xresolution}
\xdef\pointlist{(\x,\y) \pointlist }% prepend to point list
\fi
}
\draw[stealth-stealth,magenta,thick] plot[smooth] coordinates {\pointlist};


%title
\draw (current bounding box.north) node[above]{\plottitle};



% \end{tikzpicture}
\endgroup
}
